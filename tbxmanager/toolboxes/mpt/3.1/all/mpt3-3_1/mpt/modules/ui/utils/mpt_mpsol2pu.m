function pu = mpt_mpsol2pu(sol)
%
%  MPT_MPSOL2PU: Converts a parametric solution generated by solvemp to a PolyUnion
%  ================================================================================
%  object 
%  =======
%  
%  
%  SYNTAX
%  ------
%     
%      pu = mpt_mpsol2pu(sol)
%    
%  
%  DESCRIPTION
%  -----------
%     pu = mpt_mpsol2pu(sol) converts a solution obtained by YALMIP's solvemp()
%  function to a PolyUnionobject. This allows to easily convert solvemp solutions
%  into explicit MPC controllers by ctrl = EMPCController(mpt_mpsol2pu(sol)).
%    This function produces an instance of the PolyUnion class whose polyhedral
%  partition is taken from sol.Pn. The primal optimizer (given by sol.Fi and
%  sol.Gi) is assigned to the primal function of the polyunion, while the cost
%  (represented by sol.Ai, sol.Bi, and sol.Ci) is converted to the obj function of
%  the union.
%    Note that, if the input solution contains overlapping partitions, then an
%  array of polyunions will be returned. Each element of such an array then
%  represents the corresponding overlapping partition of the input solution. If the
%  objective function is piecewise affine, you can subsequently remove the overlaps
%  by calling pu = pu.min('obj').
%  
%  INPUT
%  -----
%     
%        
%          sol Solution obtained by solvemp             
%              Class: cell                              
%                
%  
%  
%  OUTPUT
%  ------
%     
%        
%          pu Parametric optimizer represented as an   
%             instance of the PolyUnion class          
%             Class: PolyUnion                         
%               
%  
%  

%  AUTHOR(s)
%  ---------
%     
%    
%   (c) 2003-2013  Michal Kvasnica: STU Bratislava
%   mailto:michal.kvasnica@stuba.sk 
%  
%  

%  LICENSE
%  -------
%    
%    This program is free software; you can redistribute it and/or modify it under
%  the terms of the GNU General Public License as published by the Free Software
%  Foundation; either version 2.1 of the License, or (at your option) any later
%  version.
%    This program is distributed in the hope that it will be useful, but WITHOUT
%  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
%    You should have received a copy of the GNU General Public License along with
%  this library; if not, write to the  Free Software Foundation, Inc.,  59 Temple
%  Place, Suite 330,  Boston, MA 02111-1307 USA
%  -------------------------------------------------------------------------------
%    
%      This document was translated from LaTeX by HeVeA (1).
%  ---------------------------------------
%    
%    
%   (1) http://hevea.inria.fr/index.html
 
 
if ~iscell(sol)
	sol = {sol};
end
if isempty(sol{1})
	pu = PolyUnion;
else	
	pu = [];
	for i = 1:numel(sol)
        P = toPolyhedron(sol{i}.Pn);
		for j = 1:length(sol{i}.Pn)
			% add functions to mimic the output of Opt.solve:
			%     'z'    'w'    'primal'    'dual'    'obj'
			P(j).addFunction(AffFunction(0*sol{i}.Fi{j}, 0*sol{i}.Gi{j}), 'z');
			P(j).addFunction(AffFunction(0*sol{i}.Fi{j}, 0*sol{i}.Gi{j}), 'w');
			P(j).addFunction(AffFunction(sol{i}.Fi{j}, sol{i}.Gi{j}), 'primal');
			P(j).addFunction(AffFunction(0*sol{i}.Fi{j}, 0*sol{i}.Gi{j}), 'dual');
			if isempty(sol{i}.Ai{j})
				% affine expression for the cost
				P(j).addFunction(AffFunction(sol{i}.Bi{j}, sol{i}.Ci{j}), 'obj');
			else
				% quadratic expression for the cost
				P(j).addFunction(QuadFunction(sol{i}.Ai{j}, sol{i}.Bi{j}, ...
					sol{i}.Ci{j}), 'obj');
			end
		end
		new = PolyUnion('Set', P, 'Bounded', true, 'FullDim', true, ...
            'Overlaps', sol{i}.overlaps, ...
			'Convex', sol{i}.convex, 'Domain', toPolyhedron(sol{i}.Pfinal));
		pu = [pu, new];
		
	end
end
